#!/usr/bin/env python3

import argparse
import atexit
import random
import selectors
import socket
import types


parser = argparse.ArgumentParser(description='Run a simple message server.')
parser.add_argument('host', help='ip address of host server')
parser.add_argument('port', type=int, help='port of host server')
parser.add_argument('--buffer-size', '-b', type=int, default=20, help='size (in bytes) of buffer')
config = parser.parse_args()

sel = selectors.DefaultSelector()

server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_sock.bind((config.host, config.port))
server_sock.listen(10)
server_sock.setblocking(False)
sel.register(server_sock, selectors.EVENT_READ, data=None)

with open('one-liners.txt') as f:
    responses = [line.strip().encode('utf-8') for line in f.readlines()]

possible_names = [
    'Bruce',
    'Marlin',
    'Squishy',
    'Nigel',
    'Darla',
    'P. Sherman',
    'Nemo'
]
names = {}


def accept_wrapper(sock):
    conn, addr = sock.accept()
    names[addr] = random.choice([name for name in possible_names if name not in names.values()])

    print('New mind ripe for the picking from', ':'.join(str(p) for p in addr) + '.',
          'I am going to call them', names[addr] + '.')
    conn.setblocking(False)
    data = types.SimpleNamespace(addr=addr, inb=b'', outb=b'')
    events = selectors.EVENT_READ | selectors.EVENT_WRITE
    sel.register(conn, events, data=data)


def service_connection(key, mask):
    sock = key.fileobj
    data = key.data
    if mask & selectors.EVENT_READ:
        recv_data = sock.recv(config.buffer_size)
        if recv_data:
            name = names[data.addr]
            print('[' + name + ']', recv_data.decode('utf-8'))
            data.outb += random.choice(responses)
        else:
            print('Closing connection to', ':'.join(str(p) for p in data.addr) + '.',
                  'Bye', names[data.addr] + '!')
            del names[data.addr]
            sel.unregister(sock)
            sock.close()
    if mask & selectors.EVENT_WRITE and data.outb:
        sent = sock.send(data.outb)
        data.outb = data.outb[sent:]


@atexit.register
def close_connection():
    server_sock.close()


with server_sock:
    while True:
        for key, mask in sel.select(timeout=None):
            if key.data is None:
                accept_wrapper(key.fileobj)
            else:
                service_connection(key, mask)

